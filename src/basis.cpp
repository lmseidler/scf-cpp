#include <vector>
#include <string>
#include <iostream>
#include <array>
#include <functional>

#include "eigen-3.4.0/Eigen/Dense"

#include "basis.h"
#include "helper.h"
/*
stores exponents for all elements 
DOI: 10.1063/1.1672702
*/

// basis set exponents for STO-6G
const double AVALS_6[15][6] = {
    {2.310303149e+1, 4.235915534e+0, 1.185056519e+0, 4.070988982e-1, 1.580884151e-1, 6.510953954e-2}, // s  
    {2.768496241e+1, 5.077140627e+0, 1.426786050e+0, 2.040335729e-1, 9.260298399e-2, 4.416183978e-2},
    {3.273031938e+0, 9.200611311e-1, 3.593349765e-1, 8.636686991e-2, 4.797373812e-2, 2.724741144e-2},
    {3.232838646e+0, 3.605788802e-1, 1.717905487e-1, 5.277666487e-2, 3.163400284e-2, 1.874093091e-2},
    {1.410128298e+0, 5.077878915e-1, 1.847926858e-1, 1.061070594e-1, 3.669584901e-2, 2.213558430e-2},
    {5.868285913e+0, 1.530329631e+0, 5.475665231e-1, 2.288932733e-1, 1.046655969e-1, 4.948220127e-2}, // p
    {5.077973607e+0, 1.340786940e+0, 2.248434849e-1, 1.131741848e-1, 6.076408893e-2, 3.315424265e-2},
    {2.389722618e+0, 7.960947826e-1, 3.415541380e-1, 8.847434525e-2, 4.958248334e-2, 2.816929784e-2},
    {3.778623374e+0, 3.499121109e-1, 1.683175469e-1, 5.404070736e-2, 3.328911801e-2, 2.063815019e-2}, 
    {2.488296923e+0, 7.981487853e-1, 3.311327490e-1, 1.559114463e-1, 7.817734732e-2, 4.058484363e-2}, // d
    {4.634239420e+0, 1.341648295e+0, 2.209593028e-1, 1.101467943e-1, 5.904190370e-2, 3.232628887e-2},
    {8.820520428e-1, 3.410838409e-1, 9.204308840e-2, 5.472831774e-2, 3.391202830e-2, 2.108227374e-2},
    {1.357718039e+0, 5.004907278e-1, 2.296565064e-1, 1.173146814e-1, 6.350097171e-2, 3.474556673e-2}, // f
    {1.334096840e+0, 2.372312347e-1, 1.269485144e-1, 7.290318381e-2, 4.351355997e-2, 2.598071843e-2},
    {8.574668996e-1, 3.497184772e-1, 1.727917060e-1, 9.373643151e-2, 5.340032759e-2, 3.051364464e-2}, // g
};

// basis set coefficients for STO-6G
const double DVALS_6[15][6] = {
    { 9.163596280e-3, 4.936149294e-2, 1.685383049e-1, 3.705627997e-1, 4.164915298e-1, 1.303340841e-1 }, // s 
    {-4.151277819e-3,-2.067024148e-2,-5.150303337e-2, 3.346271174e-1, 5.621061301e-1, 1.712994697e-1 },
    {-6.775596947e-3,-5.639325779e-2,-1.587856086e-1, 5.534527651e-1, 5.015351020e-1, 7.223633674e-2 },
    { 1.374817488e-3,-8.666390043e-2,-3.130627309e-1, 7.812787397e-1, 4.389247988e-1, 2.487178756e-2 },
    { 2.695439582e-3, 1.850157487e-2,-9.588628125e-2,-5.200673560e-1, 1.087619490e+0, 3.103964343e-1 }, 
    { 7.924233646e-3, 5.144104825e-2, 1.898400060e-1, 4.049863191e-1, 4.012362861e-1, 1.051855189e-1 }, // p
    {-3.329929840e-3,-1.419488340e-2, 1.639395770e-1, 4.485358256e-1, 3.908813050e-1, 7.411456232e-2 },
    {-1.665913575e-3,-1.657464971e-2,-5.958513378e-2, 4.053115554e-1, 5.433958189e-1, 1.204970491e-1 },
    { 1.163246387e-4,-2.920771322e-2,-1.381051233e-1, 5.706134877e-1, 4.768808140e-1, 6.021665516e-2 },
    { 7.283828112e-3, 5.386799363e-2, 2.072139149e-1, 4.266269092e-1, 3.843100204e-1, 8.902827546e-2 }, // d
    {-4.749842876e-4,-3.566777891e-3, 1.108670481e-1, 4.159646930e-1, 4.621672517e-1, 1.081250196e-1 },
    {-4.097311019e-3,-2.508271857e-2, 2.648458555e-1, 5.097437054e-1, 2.654483467e-1, 2.623132212e-2 },
    { 6.930234381e-3, 5.634263745e-2, 2.217065797e-1, 4.411388883e-1, 3.688112625e-1, 7.787514504e-2 }, // f
    {-9.486751531e-4, 4.624275998e-2, 2.373699784e-1, 4.589112231e-1, 3.205010548e-1, 5.077063693e-2 },
    { 6.729778096e-3, 5.874145170e-2, 2.339955227e-1, 4.512983737e-1, 3.552053926e-1, 6.974153145e-2 }, // g
};

const int DFACT[8] = {1, 1, 3, 15, 105, 945, 10395, 135135};

// BasisFunction

// expand the basis function with STO zeta value 'zeta' into a CGTO with nprim gaussians
// currently this only supports nprim = 6 because of the hardcoded data above
void BasisFunction::expand_slater(int nprim) {
    int select;
    switch (l) {
        case 0:
            select = n - 1;
            break;
        case 1:
            select = n + 3;
            break;
        case 2:
            select = n + 6;
            break;
        case 3:
            select = n + 8;
            break;
        case 4:
            select = n + 9;
            break;
        default:
            throw(std::invalid_argument("The value of l must be 0 <= l <= 4."));
    }

    // set parameters for CGTO
    switch (nprim) {
        // only STO-6G for now
        case 6:
            // reset a_set and d_set to size 0
            a_set = std::vector<double>();
            d_set = std::vector<double>();

            for (auto a : AVALS_6[n-1]) {
                a_set.push_back(a * std::pow(zeta, 2));
            }
            for (auto d : DVALS_6[n-1]) {
                d_set.push_back(d);
            }
            break;
        default:
            throw(std::invalid_argument("Cannot expand STO into " + std::to_string(nprim) + " GTOs."));
    };

    // normalize primitive GTOs
    for (int i = 0; i < nprim; i++) {
        d_set[i] =  d_set[i] 
                    * std::pow((2 * a_set[i] / M_PI), 0.75)
                    * std::pow(std::sqrt(4 * a_set[i]), l) 
                    / std::sqrt(DFACT[l+1]);
    };
}

BasisFunction::BasisFunction(int atid, int n, int l, double zeta) {
    this->atid = atid;
    this->n = n;
    this->l = l;
    this->zeta = zeta;
}